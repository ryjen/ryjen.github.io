const authToken = "8E75C69C881A472F3F563835D6A89";

const validFileName = /[a-z\-]+/;

function showMessage(msg, type = "success") {

  var msgs = $("#messages .container");

  var err = msgs.append(document.createElement("div"))
    .addClass(type).addClass("message").text(msg);

  $("#messages").fadeIn().delay(2000).fadeOut(function() {
    err.remove();
  });
}

$(function() {

  $("#post-submit").click(function(e) {
    e.preventDefault();

    if (!validFileName.test($("#post-file").val())) {
      showMessage("invalid file name", "error");
      return;
    }

    $.ajax({
      type: "POST",
      url: "https://jenkins.micrantha.com/webhook/invoke",
      crossDomain: true,
      data: JSON.stringify({
        content: btoa($("#post").text()),
        file_name: $("#post-file").val()
      }),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      headers: {
        'Authorization': "Bearer " + authToken
      },
      success: function(result) {
        console.log(result);
        showMessage("Posted.");
      },
      failure: function(result) {
        console.log(result);
        showMessage("An error occured posting.", "error");
      }
    });
  });
});


// Avoid `console` errors in browsers that lack a console.
(function() {
  var method;
  var noop = function () {};
  var methods = [
    'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
    'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
    'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
    'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'
  ];
  var length = methods.length;
  var console = (window.console = window.console || {});

  while (length--) {
    method = methods[length];

    // Only stub undefined methods.
    if (!console[method]) {
      console[method] = noop;
    }
  }
}());

// Place any jQuery/helper plugins in here.

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInBsdWdpbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF1dGhUb2tlbiA9IFwiOEU3NUM2OUM4ODFBNDcyRjNGNTYzODM1RDZBODlcIjtcblxuY29uc3QgdmFsaWRGaWxlTmFtZSA9IC9bYS16XFwtXSsvO1xuXG5mdW5jdGlvbiBzaG93TWVzc2FnZShtc2csIHR5cGUgPSBcInN1Y2Nlc3NcIikge1xuXG4gIHZhciBtc2dzID0gJChcIiNtZXNzYWdlcyAuY29udGFpbmVyXCIpO1xuXG4gIHZhciBlcnIgPSBtc2dzLmFwcGVuZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKVxuICAgIC5hZGRDbGFzcyh0eXBlKS5hZGRDbGFzcyhcIm1lc3NhZ2VcIikudGV4dChtc2cpO1xuXG4gICQoXCIjbWVzc2FnZXNcIikuZmFkZUluKCkuZGVsYXkoMjAwMCkuZmFkZU91dChmdW5jdGlvbigpIHtcbiAgICBlcnIucmVtb3ZlKCk7XG4gIH0pO1xufVxuXG4kKGZ1bmN0aW9uKCkge1xuXG4gICQoXCIjcG9zdC1zdWJtaXRcIikuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghdmFsaWRGaWxlTmFtZS50ZXN0KCQoXCIjcG9zdC1maWxlXCIpLnZhbCgpKSkge1xuICAgICAgc2hvd01lc3NhZ2UoXCJpbnZhbGlkIGZpbGUgbmFtZVwiLCBcImVycm9yXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIHVybDogXCJodHRwczovL2plbmtpbnMubWljcmFudGhhLmNvbS93ZWJob29rL2ludm9rZVwiLFxuICAgICAgY3Jvc3NEb21haW46IHRydWUsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNvbnRlbnQ6IGJ0b2EoJChcIiNwb3N0XCIpLnRleHQoKSksXG4gICAgICAgIGZpbGVfbmFtZTogJChcIiNwb3N0LWZpbGVcIikudmFsKClcbiAgICAgIH0pLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IFwiQmVhcmVyIFwiICsgYXV0aFRva2VuXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgIHNob3dNZXNzYWdlKFwiUG9zdGVkLlwiKTtcbiAgICAgIH0sXG4gICAgICBmYWlsdXJlOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgc2hvd01lc3NhZ2UoXCJBbiBlcnJvciBvY2N1cmVkIHBvc3RpbmcuXCIsIFwiZXJyb3JcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbiIsIi8vIEF2b2lkIGBjb25zb2xlYCBlcnJvcnMgaW4gYnJvd3NlcnMgdGhhdCBsYWNrIGEgY29uc29sZS5cbihmdW5jdGlvbigpIHtcbiAgdmFyIG1ldGhvZDtcbiAgdmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgdmFyIG1ldGhvZHMgPSBbXG4gICAgJ2Fzc2VydCcsICdjbGVhcicsICdjb3VudCcsICdkZWJ1ZycsICdkaXInLCAnZGlyeG1sJywgJ2Vycm9yJyxcbiAgICAnZXhjZXB0aW9uJywgJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJywgJ2dyb3VwRW5kJywgJ2luZm8nLCAnbG9nJyxcbiAgICAnbWFya1RpbWVsaW5lJywgJ3Byb2ZpbGUnLCAncHJvZmlsZUVuZCcsICd0YWJsZScsICd0aW1lJywgJ3RpbWVFbmQnLFxuICAgICd0aW1lbGluZScsICd0aW1lbGluZUVuZCcsICd0aW1lU3RhbXAnLCAndHJhY2UnLCAnd2FybidcbiAgXTtcbiAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICB2YXIgY29uc29sZSA9ICh3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHt9KTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBtZXRob2QgPSBtZXRob2RzW2xlbmd0aF07XG5cbiAgICAvLyBPbmx5IHN0dWIgdW5kZWZpbmVkIG1ldGhvZHMuXG4gICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IG5vb3A7XG4gICAgfVxuICB9XG59KCkpO1xuXG4vLyBQbGFjZSBhbnkgalF1ZXJ5L2hlbHBlciBwbHVnaW5zIGluIGhlcmUuXG4iXX0=
