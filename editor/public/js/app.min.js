const authToken = "8E75C69C881A472F3F563835D6A89";

const validFileName = /[a-z\-]+/;

function showMessage(msg, type = "success") {

  var msgs = $("#messages .container");

  var err = msgs.append(document.createElement("div"))
    .addClass(type).text(msg);

  $("#messages").slideDown().delay(2000).slideUp(function() {
    err.remove();
  });
}

$(function() {

  $("#post-submit").click(function(e) {
    e.preventDefault();

    if (!validFileName.test($("#post-file").val())) {
      showMessage("invalid file name", "error");
      return;
    }

    $.ajax({
      type: "POST",
      url: "https://jenkins.micrantha.com/webhook/invoke",
      crossDomain: true,
      data: JSON.stringify({
        content: btoa($("#post").text()),
        file_name: $("#post-file").val()
      }),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      headers: {
        'Authorization': "Bearer " + authToken
      },
      success: function(result) {
        console.log(result);
        showMessage("Posted.");
      },
      failure: function(result) {
        console.log(result);
        showMessage("An error occured posting.", "error");
      }
    });
  });
});


// Avoid `console` errors in browsers that lack a console.
(function() {
  var method;
  var noop = function () {};
  var methods = [
    'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
    'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
    'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
    'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'
  ];
  var length = methods.length;
  var console = (window.console = window.console || {});

  while (length--) {
    method = methods[length];

    // Only stub undefined methods.
    if (!console[method]) {
      console[method] = noop;
    }
  }
}());

// Place any jQuery/helper plugins in here.

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInBsdWdpbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF1dGhUb2tlbiA9IFwiOEU3NUM2OUM4ODFBNDcyRjNGNTYzODM1RDZBODlcIjtcblxuY29uc3QgdmFsaWRGaWxlTmFtZSA9IC9bYS16XFwtXSsvO1xuXG5mdW5jdGlvbiBzaG93TWVzc2FnZShtc2csIHR5cGUgPSBcInN1Y2Nlc3NcIikge1xuXG4gIHZhciBtc2dzID0gJChcIiNtZXNzYWdlcyAuY29udGFpbmVyXCIpO1xuXG4gIHZhciBlcnIgPSBtc2dzLmFwcGVuZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKVxuICAgIC5hZGRDbGFzcyh0eXBlKS50ZXh0KG1zZyk7XG5cbiAgJChcIiNtZXNzYWdlc1wiKS5zbGlkZURvd24oKS5kZWxheSgyMDAwKS5zbGlkZVVwKGZ1bmN0aW9uKCkge1xuICAgIGVyci5yZW1vdmUoKTtcbiAgfSk7XG59XG5cbiQoZnVuY3Rpb24oKSB7XG5cbiAgJChcIiNwb3N0LXN1Ym1pdFwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKCF2YWxpZEZpbGVOYW1lLnRlc3QoJChcIiNwb3N0LWZpbGVcIikudmFsKCkpKSB7XG4gICAgICBzaG93TWVzc2FnZShcImludmFsaWQgZmlsZSBuYW1lXCIsIFwiZXJyb3JcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgJC5hamF4KHtcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgdXJsOiBcImh0dHBzOi8vamVua2lucy5taWNyYW50aGEuY29tL3dlYmhvb2svaW52b2tlXCIsXG4gICAgICBjcm9zc0RvbWFpbjogdHJ1ZSxcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgY29udGVudDogYnRvYSgkKFwiI3Bvc3RcIikudGV4dCgpKSxcbiAgICAgICAgZmlsZV9uYW1lOiAkKFwiI3Bvc3QtZmlsZVwiKS52YWwoKVxuICAgICAgfSksXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogXCJCZWFyZXIgXCIgKyBhdXRoVG9rZW5cbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgc2hvd01lc3NhZ2UoXCJQb3N0ZWQuXCIpO1xuICAgICAgfSxcbiAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICBzaG93TWVzc2FnZShcIkFuIGVycm9yIG9jY3VyZWQgcG9zdGluZy5cIiwgXCJlcnJvclwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KTtcblxuIiwiLy8gQXZvaWQgYGNvbnNvbGVgIGVycm9ycyBpbiBicm93c2VycyB0aGF0IGxhY2sgYSBjb25zb2xlLlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgbWV0aG9kO1xuICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgbWV0aG9kcyA9IFtcbiAgICAnYXNzZXJ0JywgJ2NsZWFyJywgJ2NvdW50JywgJ2RlYnVnJywgJ2RpcicsICdkaXJ4bWwnLCAnZXJyb3InLFxuICAgICdleGNlcHRpb24nLCAnZ3JvdXAnLCAnZ3JvdXBDb2xsYXBzZWQnLCAnZ3JvdXBFbmQnLCAnaW5mbycsICdsb2cnLFxuICAgICdtYXJrVGltZWxpbmUnLCAncHJvZmlsZScsICdwcm9maWxlRW5kJywgJ3RhYmxlJywgJ3RpbWUnLCAndGltZUVuZCcsXG4gICAgJ3RpbWVsaW5lJywgJ3RpbWVsaW5lRW5kJywgJ3RpbWVTdGFtcCcsICd0cmFjZScsICd3YXJuJ1xuICBdO1xuICB2YXIgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG4gIHZhciBjb25zb2xlID0gKHdpbmRvdy5jb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge30pO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIG1ldGhvZCA9IG1ldGhvZHNbbGVuZ3RoXTtcblxuICAgIC8vIE9ubHkgc3R1YiB1bmRlZmluZWQgbWV0aG9kcy5cbiAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgY29uc29sZVttZXRob2RdID0gbm9vcDtcbiAgICB9XG4gIH1cbn0oKSk7XG5cbi8vIFBsYWNlIGFueSBqUXVlcnkvaGVscGVyIHBsdWdpbnMgaW4gaGVyZS5cbiJdfQ==
