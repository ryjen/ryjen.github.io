<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on coda.life</title>
    <link>https://coda.life/post/</link>
    <description>Recent content in Posts on coda.life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coda.life/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deep Thoughts with RJ</title>
      <link>https://coda.life/2018/07/19/deep-thoughts-with-rj/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2018/07/19/deep-thoughts-with-rj/</guid>
      <description>If you are familiar with 90s Saturday Night Live, you may be familiar with a skit called &amp;ldquo;Deep Thoughts with Jack Handy&amp;rdquo;.
This is the simpleton who looks in the mirror and says the famous words &amp;ldquo;Your good enough, smart enough and gosh darn it&amp;hellip;. people like you&amp;rdquo;.
I tend to have an active mind, so going to log some deep thoughts:
Deep Thoughts With RJ Relatively and Absolutely Things that matter relatively but not absolutely include: everything.</description>
    </item>
    
    <item>
      <title>Mitmproxy and Android</title>
      <link>https://coda.life/2018/05/16/mitmproxy-and-android/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2018/05/16/mitmproxy-and-android/</guid>
      <description>Introduction Debugging network traffic for your app can be useful, and sometimes necessary if the data is not what is expected or inconsistent.
The Proxy I prefer the open source proxy mitmproxy. Easy to install on OSX with homebrew.
brew install mitmproxy
I&amp;rsquo;ll leave it up to you to explore its greatness, I just wanna clarify the android setup.
Steps 1) mitmproxy Choose a port (ex. 8888) and start the program: mitmproxy -p 8888:</description>
    </item>
    
    <item>
      <title>Deploy Docker Registry with Dokku</title>
      <link>https://coda.life/2018/02/19/deploy-docker-registry-with-dokku/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2018/02/19/deploy-docker-registry-with-dokku/</guid>
      <description>Prerequisites You&amp;rsquo;ll need to prepare a bit.
 A local path on the server to store registry data. For example: /mydir/registry Docker installed on the client and server machine Dokku installed on the server  For Authentication  httpasswd command is installed  For an External Registry  Dokku letsencrypt plugin installed A working domain name pointing to the dokku app. For example, https://registry.mydomain.com  Create the dokku app Create the dokku app and retag a pre-existing repository image to it.</description>
    </item>
    
    <item>
      <title>Fortunes on Slack</title>
      <link>https://coda.life/2018/01/22/fortunes-on-slack/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2018/01/22/fortunes-on-slack/</guid>
      <description>view the service homepage
Introduction Have always enjoyed the UNIX fortunes program, ever since I was a wee newbie. If you aren&amp;rsquo;t familiar with it (sad), yes, its like a fortune cookie.
It can be more technical in nature but not always. It also has poems, quotations, and if enabled - offensive content.
Often I would find a fortune I&amp;rsquo;d like to share and pipe it to a snippet from the terminal.</description>
    </item>
    
    <item>
      <title>Microsoft Dev Stack on macOS</title>
      <link>https://coda.life/2016/11/27/microsoft-dev-stack-on-macos/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2016/11/27/microsoft-dev-stack-on-macos/</guid>
      <description>Gonna evangelize a little bit.
When Microsoft bought Xamarin, they did not underestimate the power of Xamarin.Forms for building cross platform UIs. Now with the release of Visual Studio for macOS and the Dotnet Core, its looks like its going to stay alive.
Development Environment  macOS, XCode Android SDK Dotnet core Visual Studio for macOS nuget  Web ASP.NET Production Environment  Digital Ocean Dotnet core on Docker Dokku, docker based heroku  Platforms Targeted in One Solution  iOS Android Web ASP.</description>
    </item>
    
    <item>
      <title>Elixir and Phoenix</title>
      <link>https://coda.life/2015/09/09/elixir-and-phoenix/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2015/09/09/elixir-and-phoenix/</guid>
      <description>Introduction Saw a post on reddit about this new web framework phoenix. It is an elixir based framework. Elixir is based upon erlang. Erlang has been around a while (open-sourced in 1998) and is a massively scalable and highly reliable language used in telecoms, banking and instant messaging (among others).
Elixir brings very ruby-ish syntax to the language. Phoenix framework is like rails for elixir, and is pretty full featured.</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://coda.life/2012/11/30/poor-mans-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/11/30/poor-mans-polymorphism/</guid>
      <description>Just when you think you know everything about C&amp;hellip; a way to polymorph C data structures.
How? Structs with the same field types and ordering can be casted.
This is an attempt at an example.
Note: Don&#39;t do anything like this in the real world.  Example Story Given a base structure called vehicle&amp;hellip;
typedef struct { int key; } Vehicle;  Sub structures must implement the exact types and order to cast it.</description>
    </item>
    
    <item>
      <title>C Sqlite Tricks</title>
      <link>https://coda.life/2012/05/15/c-sqlite-tricks/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/05/15/c-sqlite-tricks/</guid>
      <description>Introduction Thought I would share some tricks I use for easy data CRUD&amp;rsquo;s in C. I&amp;rsquo;m using Sqlite here, but could apply to any database.
Not saying its the best approach at all (nor ryjen/db), this is just how it evolved for me.
Mapping The core of my data access is the FieldMap structure, which determines how to save each field to the database.
/* * this is the magical table used to communicate between memory and the database */ typedef struct FieldMap { const char *name; /* name of the field */ void *value; /* a pointer to the value of the field */ int type; /* type of value */ const void *arg1; /* additional argument */ const void *arg2; /* additional argument */ int flags; /* usage flags */ } FieldMap; /* callback for custom field types */ typedef int (*CustomField) (sqlite3_stmt *, int column, FieldMap *field); typedef void (*DbCallback) (sqlite3_stmt *);  Note: these examples will create this table dynamically with an object, however this can be used as a static table.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://coda.life/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/1/01/01/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>