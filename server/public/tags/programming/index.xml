<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on coda.life</title>
    <link>https://coda.life/tags/programming/</link>
    <description>Recent content in Programming on coda.life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Nov 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coda.life/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microsoft Dev Stack on macOS</title>
      <link>https://coda.life/2016/11/27/microsoft-dev-stack-on-macos/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2016/11/27/microsoft-dev-stack-on-macos/</guid>
      <description>Gonna evangelize a little bit.
When Microsoft bought Xamarin, they did not underestimate the power of Xamarin.Forms for building cross platform UIs. Now with the release of Visual Studio for macOS and the Dotnet Core, its looks like its going to stay alive.
Development Environment  macOS, XCode Android SDK Dotnet core Visual Studio for macOS nuget  Web ASP.NET Production Environment  Digital Ocean Dotnet core on Docker Dokku, docker based heroku  Platforms Targeted in One Solution  iOS Android Web ASP.</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://coda.life/2012/11/30/poor-mans-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/11/30/poor-mans-polymorphism/</guid>
      <description>Just when you think you know everything about C&amp;hellip; a way to polymorph C data structures.
How? Structs with the same field types and ordering can be casted.
Note: Don&#39;t do anything like this. Not portable or guaranteed that I know of.   </description>
    </item>
    
    <item>
      <title>C Sqlite Tricks</title>
      <link>https://coda.life/2012/05/15/c-sqlite-tricks/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/05/15/c-sqlite-tricks/</guid>
      <description>Well, I thought I would share some tricks I use for easy data CRUD&amp;rsquo;s in C (potentially C++/ObjC but its lacking typesafety). I&amp;rsquo;m using sqlite here, but could apply to any database.
This is how my data access works - I&amp;rsquo;m not saying its the best approach, its just how its evolved for me.
/* The account table name */ #define ACCOUNT_TABLE &amp;quot;account&amp;quot; /* a structure representing the account fields */ field_map account_values[] = { {&amp;quot;login&amp;quot;, &amp;amp;acc-&amp;gt;login, SQL_TEXT}, {&amp;quot;email&amp;quot;, &amp;amp;acc-&amp;gt;email, SQL_TEXT}, {&amp;quot;password&amp;quot;, &amp;amp;acc-&amp;gt;password, SQL_TEXT}, {&amp;quot;timezone&amp;quot;, &amp;amp;acc-&amp;gt;timezone, SQL_INT}, {0} }; /* saves the fields to the database */ acc-&amp;gt;id = db_save(account_values, ACCOUNT_TABLE, acc-&amp;gt;id);  As you can see, saving a structure is as simple as creating a field_map table and calling db_save.</description>
    </item>
    
  </channel>
</rss>