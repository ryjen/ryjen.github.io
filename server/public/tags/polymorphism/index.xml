<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polymorphism on coda.life</title>
    <link>https://coda.life/tags/polymorphism/</link>
    <description>Recent content in Polymorphism on coda.life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; all rights reserved</copyright>
    <lastBuildDate>Wed, 02 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coda.life/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>c hacking: polymorphing 2</title>
      <link>https://coda.life/2015/12/02/c-hacking-polymoriphing-2/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2015/12/02/c-hacking-polymoriphing-2/</guid>
      <description>While working on cparse I found another nifty way to sort of simulate polymorphism.
cparse Another exercise in futility, a C implementation for the REST api at parse.com. Really the core of it is a web client and an object structure using json.
polymorphing I started off by having separate structure for the different type of objects, but I quickly realized there was a lot of code duplication. To solve this I used a combination of type defines and function pointers to the library API appear to be working with a seperate type, but are indeed still working with the base object type.</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://coda.life/2012/11/30/poor-mans-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/11/30/poor-mans-polymorphism/</guid>
      <description>Just when you think you know everything about C&amp;hellip; a way to polymorph C data structures using field ordering and casts.
 </description>
    </item>
    
  </channel>
</rss>