<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlite on coda.life</title>
    <link>https://coda.life/tags/sqlite/</link>
    <description>Recent content in Sqlite on coda.life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 May 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coda.life/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C Sqlite Tricks</title>
      <link>https://coda.life/2012/05/15/c-sqlite-tricks/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://coda.life/2012/05/15/c-sqlite-tricks/</guid>
      <description>Well, I thought I would share some tricks I use for easy data CRUD&amp;rsquo;s in C (potentially C++/ObjC but its lacking typesafety). I&amp;rsquo;m using sqlite here, but could apply to any database.
This is how my data access works - I&amp;rsquo;m not saying its the best approach, its just how its evolved for me.
/* The account table name */ #define ACCOUNT_TABLE &amp;quot;account&amp;quot; /* a structure representing the account fields */ field_map account_values[] = { {&amp;quot;login&amp;quot;, &amp;amp;acc-&amp;gt;login, SQL_TEXT}, {&amp;quot;email&amp;quot;, &amp;amp;acc-&amp;gt;email, SQL_TEXT}, {&amp;quot;password&amp;quot;, &amp;amp;acc-&amp;gt;password, SQL_TEXT}, {&amp;quot;timezone&amp;quot;, &amp;amp;acc-&amp;gt;timezone, SQL_INT}, {0} }; /* saves the fields to the database */ acc-&amp;gt;id = db_save(account_values, ACCOUNT_TABLE, acc-&amp;gt;id);  As you can see, saving a structure is as simple as creating a field_map table and calling db_save.</description>
    </item>
    
  </channel>
</rss>