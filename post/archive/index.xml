<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Archives on ryan jennings</title>
    <link>https://ryanjennin.gs/post/archive/</link>
    <description>Recent content in Blog Archives on ryan jennings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ryanjennin.gs/post/archive/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy Docker Registry with Dokku</title>
      <link>https://ryanjennin.gs/2018/02/19/deploy-docker-registry-with-dokku/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2018/02/19/deploy-docker-registry-with-dokku/</guid>
      <description>Prerequisites You&amp;rsquo;ll need to prepare a bit.
  A local path on the server to store registry data. For example: /mydir/registry Docker installed on the client and server machine Dokku installed on the server  For Authentication  httpasswd command is installed  For an External Registry  Dokku letsencrypt plugin installed A working domain name pointing to the dokku app. For example, https://registry.mydomain.com  Create the dokku app Create the dokku app and retag a pre-existing repository image to it.</description>
    </item>
    
    <item>
      <title>Microsoft Dev Stack on macOS</title>
      <link>https://ryanjennin.gs/2016/11/27/microsoft-dev-stack-on-macos/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2016/11/27/microsoft-dev-stack-on-macos/</guid>
      <description>Gonna evangelize a little bit.
When Microsoft bought Xamarin, they did not underestimate the power of Xamarin.Forms for building cross platform UIs. Now with the release of Visual Studio for macOS and the Dotnet Core, its looks like its going to stay alive.
Development Environment  macOS, XCode Android SDK Dotnet core Visual Studio for macOS nuget  Web ASP.NET Production Environment  Digital Ocean Dotnet core on Docker Dokku, docker based heroku  Platforms Targeted in One Solution  iOS Android Web ASP.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Dokku &#43; Wercker = Goodness</title>
      <link>https://ryanjennin.gs/2016/06/22/hugo-dokku-wercker-goodness/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2016/06/22/hugo-dokku-wercker-goodness/</guid>
      <description>Hugo Hugo is a static site generator with many powerful features like archtypes, themes, customization, etc.
Combined with tools like bower and brunch it makes for a pretty powerful app that could be more than a blog.
The workflow is simple - build your assets with brunch, run the hugo generator. The end result is a complete static html site you can deploy.
Dokku Dokku has been great for running multiple small apps on a single digitalocean droplet.</description>
    </item>
    
    <item>
      <title>c hacking: polymorphing 2</title>
      <link>https://ryanjennin.gs/2015/12/02/c-hacking-polymoriphing-2/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2015/12/02/c-hacking-polymoriphing-2/</guid>
      <description>While working on cparse I found another nifty way to sort of simulate polymorphism.
cparse Another exercise in futility, a C implementation for the REST api at parse.com. Really the core of it is a web client and an object structure using json.
polymorphing I started off by having separate structure for the different type of objects, but I quickly realized there was a lot of code duplication. To solve this I used a combination of type defines and function pointers to the library API appear to be working with a seperate type, but are indeed still working with the base object type.</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://ryanjennin.gs/2012/11/30/poor-mans-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2012/11/30/poor-mans-polymorphism/</guid>
      <description>Found out that C structs can be casted between each other if the field types and ordering are the same. It is not portable code, but you can start too see how and why the virtual table and object oriented programming evolved in c++.
As far as I know it would still be possible to write this in c++, but as always, you should definitely not.
A Quick Example struct Animal { int eyes; } struct Dog { int eyes; /* dog specific */ int tail; } struct Human{ int eyes; /* human specific */ int brain; } Passing humans or dogs to any function that takes an animal with a cast.</description>
    </item>
    
    <item>
      <title>Crafting a Game With CraftyJS</title>
      <link>https://ryanjennin.gs/2012/11/17/crafting-a-game-with-craftyjs/</link>
      <pubDate>Sat, 17 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2012/11/17/crafting-a-game-with-craftyjs/</guid>
      <description>Introduction Briefly going to mention a javascript game engine called CraftyJS that I&amp;rsquo;ve been playing with the past couple of days.
Has the usual suspects like Entity Component System, Collision, Sprite Maps, etc.
The Project 
Amos the Alien is a small demo I made.
I knew that I wanted a scrolling background of some sort - in other words - parallax scrolling. I also knew that I wanted two modes of scrolling: A) automatic background scrollin (clouds, etc) and character movement scrolling.</description>
    </item>
    
    <item>
      <title>C Sqlite Tricks</title>
      <link>https://ryanjennin.gs/2012/05/15/c-sqlite-tricks/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2012/05/15/c-sqlite-tricks/</guid>
      <description>Introduction Thought I would share some tricks I use for easy data CRUD&amp;rsquo;s in C. I&amp;rsquo;m using Sqlite here, but could apply to any database.
Not saying its the best approach at all (nor ryjen/db), this is just how it evolved for me.
Mapping The core of my data access is the FieldMap structure, which determines how to save each field to the database.
/* * this is the magical table used to communicate between memory and the database */ typedef struct FieldMap { const char *name; /* name of the field */ void *value; /* a pointer to the value of the field */ int type; /* type of value */ const void *arg1; /* additional argument */ const void *arg2; /* additional argument */ int flags; /* usage flags */ } FieldMap; /* callback for custom field types */ typedef int (*CustomField) (sqlite3_stmt *, int column, FieldMap *field); typedef void (*DbCallback) (sqlite3_stmt *); Basically you would have to:Example 1 - Saving This high level example shows building a quick table for each field we want to save in the database.</description>
    </item>
    
  </channel>
</rss>
