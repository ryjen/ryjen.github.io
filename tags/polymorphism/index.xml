<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polymorphism on ryan jennings</title>
    <link>https://ryanjennin.gs/tags/polymorphism/</link>
    <description>Recent content in polymorphism on ryan jennings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://ryanjennin.gs/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c hacking: polymorphing 2</title>
      <link>https://ryanjennin.gs/2015/12/02/c-hacking-polymoriphing-2/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2015/12/02/c-hacking-polymoriphing-2/</guid>
      <description>While working on cparse I found another nifty way to sort of simulate polymorphism.
cparse Another exercise in futility, a C implementation for the REST api at parse.com. Really the core of it is a web client and an object structure using json.
polymorphing I started off by having separate structure for the different type of objects, but I quickly realized there was a lot of code duplication. To solve this I used a combination of type defines and function pointers to the library API appear to be working with a seperate type, but are indeed still working with the base object type.</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://ryanjennin.gs/2012/11/30/poor-mans-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/2012/11/30/poor-mans-polymorphism/</guid>
      <description>Found out that C structs can be casted between each other if the field types and ordering are the same. It is not portable code, but you can start too see how and why the virtual table and object oriented programming evolved in c++.
As far as I know it would still be possible to write this in c++, but as always, you should definitely not.
A Quick Example struct Animal { int eyes; } struct Dog { int eyes; /* dog specific */ int tail; } struct Human{ int eyes; /* human specific */ int brain; } Passing humans or dogs to any function that takes an animal with a cast.</description>
    </item>
    
  </channel>
</rss>
