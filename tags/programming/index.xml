<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Home</title>
    <link>https://ryanjennin.gs/tags/programming/</link>
    <description>Recent content in programming on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://ryanjennin.gs/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>c hacking: polymorphing 2</title>
      <link>https://ryanjennin.gs/archive/c-hacking-polymoriphing-2/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/archive/c-hacking-polymoriphing-2/</guid>
      <description>While working on cparse I found another nifty way to sort of simulate polymorphism.
cparse Another exercise in futility, a C implementation for the REST api at parse.com. Really the core of it is a web client and an object structure using json.</description>
    </item>
    
    <item>
      <title>Java Key Path Json Objects</title>
      <link>https://ryanjennin.gs/posts/java-key-path-json-objects/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/posts/java-key-path-json-objects/</guid>
      <description>After using apple&amp;rsquo;s key-value coding to basically have models without writing models, I decided to write rewrite a simple wrapper for java&amp;rsquo;s JSONObject that will allow similar functionality.
I&amp;rsquo;m aware that this method and apple&amp;rsquo;s key value coding has a performance cost.</description>
    </item>
    
    <item>
      <title>Mud Harbour: An Experiment in Websockets and Java Web Frameworks</title>
      <link>https://ryanjennin.gs/posts/mud-harbour-an-experiment-in-websockets-and-java-web-frameworks/</link>
      <pubDate>Sat, 10 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/posts/mud-harbour-an-experiment-in-websockets-and-java-web-frameworks/</guid>
      <description>Well I spent some time put a web front end to some java code I made a long time ago for a MUD
The project is a decent example of Jersey, SocialAuth and WebSockets with some other nifty things (taken from other frameworks - like flash messages).</description>
    </item>
    
    <item>
      <title>Poor Man&#39;s Polymorphism</title>
      <link>https://ryanjennin.gs/archive/poor-man-s-polymorphism/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/archive/poor-man-s-polymorphism/</guid>
      <description>Found out that C structs can be casted between each other if the field types and ordering are the same. It is not portable code, but you can start too see how and why the virtual table and object oriented programming evolved in c++.</description>
    </item>
    
    <item>
      <title>C Sqlite Tricks</title>
      <link>https://ryanjennin.gs/archive/c-sqlite-tricks/</link>
      <pubDate>Tue, 15 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/archive/c-sqlite-tricks/</guid>
      <description>Introduction Thought I would share some tricks I use for easy data CRUD&amp;rsquo;s in C. I&amp;rsquo;m using Sqlite here, but could apply to any database.
Not saying its the best approach at all (nor ryjen/db), this is just how it evolved for me.</description>
    </item>
    
    <item>
      <title>Best Programming Quotes</title>
      <link>https://ryanjennin.gs/posts/best-programming-quotes/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ryanjennin.gs/posts/best-programming-quotes/</guid>
      <description>Quotes that relate to software engineering always humble me with their laser-like honesty. I&amp;rsquo;ve decided to keep a collection of my favorites here (in no particular order).</description>
    </item>
    
  </channel>
</rss>
